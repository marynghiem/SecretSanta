{"version":3,"sources":["components/SecretSanta.js","App.js","reportWebVitals.js","index.js"],"names":["SecretSanta","useState","names","setNames","emails","setEmails","currentEmail","setCurrentEmail","currentName","setCurrentName","isAddParticipantEmailInvalid","test","isAddParticipantButtonDisabled","trim","some","name","email","className","id","type","placeholder","maxLength","onChange","event","target","value","onClick","alert","map","index","targetIndex","prev","filter","listOfNamesAndEmails","namesArr","emailsArr","objects","i","length","obj","push","listToObject","fetch","method","body","JSON","stringify","headers","then","response","json","data","message","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2e70301.chunk.js","sourcesContent":["import \"../css/SecretSanta.css\";\nimport React, { useState } from \"react\";\n\nexport const SecretSanta = () => {\n  const [names, setNames] = useState([]);\n  const [emails, setEmails] = useState([]);\n  const [currentEmail, setCurrentEmail] = useState(\"\");\n  const [currentName, setCurrentName] = useState(\"\");\n\n  const addParticipant = () => {\n    if (isAddParticipantButtonDisabled()) {\n      alert(\"Name or email already exists.\");\n    } else if (isAddParticipantEmailInvalid()) {\n      alert(\"Invalid email.\");\n    } else {\n      setNames([...names, currentName]);\n      setEmails([...emails, currentEmail]);\n      setCurrentEmail(\"\");\n      setCurrentName(\"\");\n    }\n  };\n\n  const onEmailInputChange = (event) => {\n    setCurrentEmail(event.target.value);\n  };\n\n  const onNameChange = (event) => {\n    setCurrentName(event.target.value);\n  };\n\n  const removeParticipant = (targetIndex) => {\n    setNames((prev) => {\n      return prev.filter((name, index) => index !== targetIndex);\n    });\n    setEmails((prev) => {\n      return prev.filter((email, index) => index !== targetIndex);\n    });\n  };\n\n  const clearParticipants = () => {\n    setNames([]);\n    setEmails([]);\n  };\n\n  const isAddParticipantEmailInvalid = () => {\n    let regExEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    let EmailsWereAMatch = regExEmail.test(currentEmail);\n    if (EmailsWereAMatch) {\n      //if emailswereamatch is true, this returns false because isaddparticipantemailinvalid is false\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const isAddParticipantButtonDisabled = () => {\n    if (currentName.trim() === \"\" || currentEmail.trim() === \"\") {\n      return true;\n    } else if (names.some((name) => name === currentName) || emails.some((email) => email === currentEmail)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  function listToObject(namesArr, emailsArr) {\n    // Create a list to contain the new objects\n    var objects = [];\n    // Loop through both lists at the same time to create new objects\n    for (var i = 0; i < namesArr.length; i++) {\n      // Push the new object into our list container\n      let obj = { name: namesArr[i], email: emailsArr[i] };\n      objects.push(obj);\n    }\n    // Return the list\n    return objects;\n  }\n\n  const sendEmails = () => {\n    const listOfNamesAndEmails = listToObject(names, emails);\n    fetch(\"/api\", {\n      method: \"POST\",\n      body: JSON.stringify(listOfNamesAndEmails),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => alert(data.message));\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 id=\"titleName\">Secret Santa</h1>\n      <p className=\"description\">\n        Secret Santa is a game where a group of individuals anonymously exchange gifts to one another. To help with the\n        process of drawing names, this generator will take a list of emails, shuffle them, and send the pairing to your\n        email!\n      </p>\n\n      <div className=\"secretSantaParticipantForm\">\n        <h3>Participants Information</h3>\n        <input\n          type=\"text\"\n          className=\"nameInput\"\n          placeholder=\"Name\"\n          maxLength=\"20\"\n          onChange={onNameChange}\n          value={currentName}\n        ></input>\n        <input\n          type=\"email\"\n          className=\"emailInput\"\n          onChange={onEmailInputChange}\n          value={currentEmail}\n          placeholder=\"Email\"\n        ></input>\n        <div className=\"buttonContainer\">\n          <button className=\"button\" id=\"addButton\" type=\"button\" onClick={addParticipant}>\n            Add Participant\n          </button>\n          <button className=\"button\" id=\"clearButton\" type=\"button\" onClick={clearParticipants}>\n            Clear Participants List\n          </button>\n        </div>\n      </div>\n\n      <div className=\"participantsList\">\n        <h3>Participants List</h3>\n        <ol className=\"namesList\">\n          {names.map((name, index) => (\n            <li key={index} className=\"nameList\">\n              {name}\n            </li>\n          ))}\n        </ol>\n        <ol className=\"emailsList\">\n          {emails.map((email, index) => (\n            <li key={index} className=\"emailList\">\n              <span className=\"emailText\">{email}</span>\n              <button className=\"button\" id=\"deleteButton\" onClick={() => removeParticipant(index)}>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ol>\n        <button className=\"button\" id=\"PairUpButton\" onClick={sendEmails}>\n          Pair up!\n        </button>\n      </div>\n    </div>\n  );\n};\n","import \"./App.css\";\nimport { SecretSanta } from \"./components/SecretSanta\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SecretSanta />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}